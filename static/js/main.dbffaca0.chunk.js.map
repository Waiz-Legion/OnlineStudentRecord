{"version":3,"sources":["CreateTask.js","EditTask.js","Card.js","TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["CreateTaskPopup","modal","toggle","save","useState","taskName","setTaskName","pnum","setPnum","panum","setPanum","jdate","setJdate","remarks","setRemarks","handleChange","e","target","name","value","Modal","isOpen","ModalHeader","ModalBody","className","id","onSubmit","document","myForm","taskname","alert","preventDefault","taskObj","swal","setTimeout","window","location","reload","type","maxlength","placeholder","onChange","required","minlength","rows","Button","color","onClick","EditTaskPopup","updateTask","useEffect","Name","Remarks","Panum","Pnum","Jdate","tempObj","ModalFooter","Card","index","deleteTask","updateListArray","setModal","colors","primaryColor","secondaryColor","class","style","EditTask","obj","TodoList","taskList","setTaskList","arr","localStorage","getItem","JSON","parse","tempList","splice","setItem","stringify","map","CreateTask","push","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.dbffaca0.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody} from 'reactstrap';\r\nimport swal from 'sweetalert';\r\n\r\nconst CreateTaskPopup = ({modal, toggle, save}) => {\r\n    const [taskName, setTaskName] = useState('');\r\n    const [pnum, setPnum] = useState('');\r\n    const [panum, setPanum] = useState('');\r\n    const [jdate, setJdate] = useState('');\r\n    const [remarks, setRemarks] = useState('');\r\n\r\n    const handleChange = (e) => {\r\n        \r\n        const {name, value} = e.target\r\n\r\n        if(name === \"taskName\"){\r\n            setTaskName(value)\r\n        }else if(name === 'pnum'){\r\n            setPnum(value)\r\n        }else if(name === 'panum'){\r\n            setPanum(value)\r\n        }else if(name === 'jdate'){\r\n            setJdate(value)\r\n        }\r\n        else{\r\n            setRemarks(value)\r\n        }\r\n\r\n\r\n    }\r\n\r\n    const handleSave = (e) => {\r\n        var x = document.myForm.taskname?.value;\r\n        if(x === ''){\r\n            alert(\"Name cannot be empty!!!\")\r\n            return false;\r\n        }\r\n        else{\r\n            e.preventDefault()\r\n            let taskObj = {}\r\n            taskObj[\"Name\"] = taskName\r\n            taskObj[\"Pnum\"] = pnum\r\n            taskObj[\"Panum\"] = panum\r\n            taskObj[\"Jdate\"] = jdate\r\n            taskObj[\"Remarks\"] = remarks\r\n            save(taskObj)\r\n            swal(\"Success!\", \"Record is added.\", \"success\");\r\n            setTimeout (function(){window.location.reload()}, 1000)\r\n        }\r\n        \r\n\r\n    }\r\n\r\n    return (\r\n        <Modal isOpen={modal} toggle={toggle}>\r\n            <ModalHeader toggle={toggle}>Add Record</ModalHeader>\r\n            <ModalBody>\r\n            \r\n                <div className = \"form-group\">\r\n                    <form id = \"myform\" name = \"myForm\" onSubmit={handleSave}>\r\n                        <label><b>Name</b></label>\r\n                        <input type=\"text\" maxlength = '25' placeholder = '25 words limit...' className = \"form-control\" value = {taskName} onChange = {handleChange} name = \"taskName\" required/>\r\n                        <label><b>Personal Contact</b></label>\r\n                        <input type=\"text\"  maxlength = \"10\" minlength = \"10\" placeholder = 'Enter 10 digits number...' className = \"form-control\" value = {pnum} onChange = {handleChange} name = \"pnum\" required/>\r\n                        <label><b>Parents Contact</b></label>\r\n                        <input type=\"text\" minlength = '10' maxlength = '10' placeholder = 'Enter 10 digits number...' className = \"form-control\" value = {panum} onChange = {handleChange} name = \"panum\"/>\r\n                        <label><b>Joining Date</b></label>\r\n                        <input type=\"date\" className = \"form-control\" value = {jdate} onChange = {handleChange} name = \"jdate\"/>\r\n                        \r\n                        <div className = \"form-group\">\r\n                            <label><b>Remarks</b></label>\r\n                            <textarea maxlength = '70' placeholder = '70 words limit...' rows = \"5\" className = \"form-control\" value = {remarks} onChange = {handleChange} name = \"remarks\"></textarea>\r\n                        </div>\r\n                        <Button type = \"submit\" color=\"primary\" className = \"mt-2\">Add Record<i className = \"fa fa-plus m-2\"></i></Button>{' '}\r\n                        <Button color=\"secondary\" onClick={toggle} className = \"mt-2\">Cancel<i className = \"fad fa-window-close m-2\"></i></Button>\r\n                    </form>\r\n                </div>\r\n                    \r\n                \r\n            </ModalBody>\r\n      </Modal>\r\n    );\r\n};\r\n\r\nexport default CreateTaskPopup;","import React, { useState , useEffect} from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport swal from 'sweetalert';\r\n\r\nconst EditTaskPopup = ({modal, toggle, updateTask, taskObj}) => {\r\n    const [taskName, setTaskName] = useState('');\r\n    const [pnum, setPnum] = useState('');\r\n    const [panum, setPanum] = useState('');\r\n    const [jdate, setJdate] = useState('');\r\n    const [remarks, setRemarks] = useState('');\r\n\r\n    const handleChange = (e) => {\r\n        \r\n        const {name, value} = e.target\r\n\r\n        if(name === \"taskName\"){\r\n            setTaskName(value)\r\n        }else if(name === 'pnum'){\r\n            setPnum(value)\r\n        }else if(name === 'panum'){\r\n            setPanum(value)\r\n        }else if(name === 'jdate'){\r\n            setJdate(value)\r\n        }\r\n        else{\r\n            setRemarks(value)\r\n        }\r\n\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        setTaskName(taskObj.Name)\r\n        setRemarks(taskObj.Remarks)\r\n        setPanum(taskObj.Panum)\r\n        setPnum(taskObj.Pnum)\r\n        setJdate(taskObj.Jdate)\r\n        // eslint-disable-next-line\r\n    },[])\r\n\r\n    const handleUpdate = (e) => {\r\n        \r\n        let tempObj = {}\r\n        tempObj['Name'] = taskName\r\n        tempObj['Remarks'] = remarks\r\n        tempObj[\"Pnum\"] = pnum\r\n        tempObj[\"Panum\"] = panum\r\n        tempObj[\"Jdate\"] = jdate\r\n        \r\n        updateTask(tempObj)\r\n        swal(\"Updated!\", \"Record is updated.\", \"success\");\r\n    }   \r\n\r\n    return (\r\n        <Modal isOpen={modal} toggle={toggle}>\r\n            <ModalHeader toggle={toggle}>Update Record</ModalHeader>\r\n            <ModalBody>\r\n            \r\n                <div className = \"form-group\">\r\n                    <form id = \"myform\" onSubmit={handleUpdate}>\r\n                        <label><b>Name</b></label>\r\n                        <input type=\"text\" minlength = '1' maxlength = '25' placeholder = '25 words limit...' className = \"form-control\" value = {taskName} onChange = {handleChange} name = \"taskName\" required/>\r\n                        <label><b>Personal Contact</b></label>\r\n                        <input type=\"text\"  maxlength = \"10\" minlength = \"10\" placeholder = 'Enter 10 digits number...' className = \"form-control\" value = {pnum} onChange = {handleChange} name = \"pnum\" required/>\r\n                        <label><b>Parents Contact</b></label>\r\n                        <input type=\"text\" minlength = '10' maxlength = '10' placeholder = 'Enter 10 digits number...' className = \"form-control\" value = {panum} onChange = {handleChange} name = \"panum\"/>\r\n                        <label><b>Joining Date</b></label>\r\n                        <input type=\"date\" className = \"form-control\" value = {jdate} onChange = {handleChange} name = \"jdate\"/>\r\n                \r\n                        <div className = \"form-group\">\r\n                            <label><b>Remarks</b></label>\r\n                            <textarea maxlength = '70' placeholder = '70 words limit...' rows = \"5\" className = \"form-control\" value = {remarks} onChange = {handleChange} name = \"remarks\"></textarea>\r\n                        </div>\r\n                        <Button type = \"submit\" color=\"primary\" >Update Record</Button>{' '}\r\n                        <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n                    </form>\r\n                </div>\r\n                \r\n            </ModalBody>\r\n            <ModalFooter>\r\n            \r\n            </ModalFooter>\r\n      </Modal>\r\n    );\r\n};\r\n\r\nexport default EditTaskPopup;","import React, {useState} from 'react';\r\nimport EditTask from './EditTask'\r\n\r\nconst Card = ({taskObj, index, deleteTask, updateListArray}) => {\r\n    const [modal, setModal] = useState(false);\r\n\r\n    const colors = [\r\n        {\r\n            primaryColor : \"#5D93E1\",\r\n            secondaryColor : \"#ECF3FC\"\r\n        },\r\n        {\r\n            primaryColor : \"#ED85C9\",\r\n            secondaryColor : \"#FEFAF1\"\r\n        },\r\n        {\r\n            primaryColor : \"#5DC250\",\r\n            secondaryColor : \"#F2FAF1\"\r\n        },\r\n        {\r\n            primaryColor : \"#F48687\",\r\n            secondaryColor : \"#FDF1F1\"\r\n        },\r\n        {\r\n            primaryColor : \"#B964F7\",\r\n            secondaryColor : \"#F3F0FD\"\r\n        }\r\n    ]\r\n\r\n    const toggle = () => {\r\n        setModal(!modal);\r\n    }\r\n\r\n    const updateTask = (obj) => {\r\n        updateListArray(obj, index)\r\n    }\r\n\r\n    const handleDelete = () => {\r\n        deleteTask(index)\r\n    }\r\n\r\n    return (\r\n        <div class = \"card-wrapper mr-5\">\r\n            <div class = \"card-top\" style={{\"background-color\": colors[index%5].primaryColor}}></div>\r\n            <div class = \"task-holder\">\r\n                <span class = \"card-header\" style={{\"background-color\": colors[index%5].secondaryColor, \"border-radius\": \"5px\"}}>{taskObj.Name}</span>\r\n                <span class = \"card-header\" style={{\"background-color\": colors[index%5].secondaryColor, \"border-radius\": \"5px\"}}>{taskObj.Pnum}</span>\r\n                <span class = \"card-header\" style={{\"background-color\": colors[index%5].secondaryColor, \"border-radius\": \"5px\"}}>{taskObj.Panum}</span>\r\n                <span class = \"card-header\" style={{\"background-color\": colors[index%5].secondaryColor, \"border-radius\": \"5px\"}}>{taskObj.Jdate}</span>\r\n               \r\n                <div class = \"flip-back\">\r\n                    <p className = \"mt-3\">{taskObj.Remarks}</p>\r\n                </div>\r\n\r\n                <div style={{\"position\": \"absolute\", \"right\" : \"20px\", \"bottom\" : \"20px\"}}>\r\n                    <i class = \"far fa-edit\" style={{\"color\" : colors[index%5].primaryColor, \"cursor\" : \"pointer\"}} onClick = {() => setModal(true)}></i>\r\n                    <i class=\"fas fa-trash-alt\" style = {{\"color\" : colors[index%5].primaryColor, \"cursor\" : \"pointer\"}} onClick = {handleDelete}></i>\r\n                </div>\r\n        </div>\r\n        <EditTask modal = {modal} toggle = {toggle} updateTask = {updateTask} taskObj = {taskObj}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;","import React, {useEffect, useState} from 'react';\r\nimport CreateTask from './CreateTask'\r\nimport Card from './Card';\r\n\r\nconst TodoList = () => {\r\n    const [modal, setModal] = useState(false);\r\n    const [taskList, setTaskList] = useState([])\r\n    \r\n    useEffect(() => {\r\n        let arr = localStorage.getItem(\"taskList\")\r\n       \r\n        if(arr){\r\n            let obj = JSON.parse(arr)\r\n            setTaskList(obj)\r\n        }\r\n    }, [])\r\n\r\n\r\n    const deleteTask = (index) => {\r\n        let tempList = taskList\r\n        tempList.splice(index, 1)\r\n        localStorage.setItem(\"taskList\", JSON.stringify(tempList))\r\n        setTaskList(tempList)\r\n        window.location.reload()\r\n    }\r\n\r\n    const updateListArray = (obj, index) => {\r\n        let tempList = taskList\r\n        tempList[index] = obj\r\n        localStorage.setItem(\"taskList\", JSON.stringify(tempList))\r\n        setTaskList(tempList)\r\n        window.location.reload()\r\n    }\r\n\r\n    const toggle = () => {\r\n        setModal(!modal);\r\n    }\r\n\r\n    const saveTask = (taskObj) => {\r\n        let tempList = taskList\r\n        tempList.push(taskObj)\r\n        localStorage.setItem(\"taskList\", JSON.stringify(tempList))\r\n        setTaskList(taskList)\r\n        setModal(false)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className = \"header text-center\">\r\n                <h3 style = {{\"font-family\": \"Goblin One, cursive\"}}>Amaan Tution Academy</h3>\r\n                <button className = \"btn btn-primary mt-2\" onClick = {() => setModal(true)} >New Record<i className = \"fas fa-user-plus m-2\"></i></button>\r\n                \r\n            </div>\r\n            <div className = \"task-container\">\r\n            {taskList && taskList.map((obj , index) => <Card taskObj = {obj} index = {index} deleteTask = {deleteTask} updateListArray = {updateListArray}/> )}\r\n            </div>\r\n            <CreateTask toggle = {toggle} modal = {modal} save = {saveTask}/>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TodoList;","//import logo from './logo.svg';\nimport './App.css';\nimport TodoList from './TodoList'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'font-awesome/css/font-awesome.min.css'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}